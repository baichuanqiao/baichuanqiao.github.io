<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[LeetCode-Java题解(1)]]></title>
      <url>http://yoursite.com/2017/01/31/LeetCode1/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>LeetCode第一题<a id="more"></a></excerpt></p>
<p>题目链接：<a href="https://leetcode.com/problems/two-sum/" target="_blank" rel="external">https://leetcode.com/problems/two-sum/</a></p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.<br>You may assume that each input would have exactly one solution, and you may not use the same element twice.<br>大致意思是给定一个int数组，和一个 int target值，数组中有两个值的和为target ,给出这两个值的下标，你可以认为解只有一个。</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>Given nums = [2, 7, 11, 15], target = 9,<br>Because nums[0] + nums[1] = 2 + 7 = 9,<br>return [0, 1].</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>刷的第一题，因为用Java解题，属于边学边做的过程，参照网上比较有效率的解法用map解,感觉自己对于Java中的一些数据结构还要多学习。</p>
<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public int[] twoSum(int[] numbers, int target) &#123;</div><div class="line">        HashMap&lt;Integer,Integer&gt; map = new HashMap&lt;&gt;();</div><div class="line">        <span class="keyword">for</span> (int i = 0; i &lt; numbers.length; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (map.get(numbers[i]) != null) &#123;</div><div class="line">                int[] result = &#123;map.get(numbers[i]) + 1, i + 1&#125;;</div><div class="line">                <span class="built_in">return</span> result;</div><div class="line">            &#125;</div><div class="line">            map.put(target - numbers[i], i);</div><div class="line">        &#125;</div><div class="line">        int[] result = &#123;&#125;;</div><div class="line">        <span class="built_in">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[基于Intellij IDEA的Spark开发-Scala]]></title>
      <url>http://yoursite.com/2017/01/18/Scala/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>用Scala写一些Spark小程序<a id="more"></a></excerpt></p>
<h2 id="开发语言的选择"><a href="#开发语言的选择" class="headerlink" title="开发语言的选择"></a>开发语言的选择</h2><p>Spark开发语言可以选择Scala，Java和Python。虽然相对而言更熟悉Java一点，最终还是决定选择Scala作为Spark的主要开发语言。原因有以下几个：</p>
<ol>
<li>Scala是Spark的原生语言，兼容性最强,据说性能也更好。</li>
<li>这学期研讨内容就是Scala,如果不结合点大数据相关的内容而是单纯介绍这门语言的话会十分无趣，也说明不了Scala的价值所在。</li>
<li>Scala是基于JVM的，方便兼容其他基于Java语言的大数据系统。</li>
<li>Scala有逼格啊hhh，不是还有人说有望成为下一代的Java吗！</li>
</ol>
<h2 id="Scala环境配置"><a href="#Scala环境配置" class="headerlink" title="Scala环境配置"></a>Scala环境配置</h2><p>首先你想用Scala的话请确保已经安装了JDK1.5以上版本，用过Java同学的这步就可以跳过了，然后去<a href="http://www.scala-lang.org/" target="_blank" rel="external">官网</a>下载二进制安装包然后配置环境变量啊balabala我就不说了，网上都有。这里就提一下用到的编译器IntelliJ  IDEA中直接安装Scala插件，不得不说这款编译器是我继VS后遇到的第二款宇宙级IDE，反正用它敲代码比Eclipse效率要高一些(比如代码补全就更加智能一些)。<a href="https://www.jetbrains.com/idea/" target="_blank" rel="external">IntelliJ  IDEA</a>是JetBrains公司开发的一系列编程工具中的一款，面向社会的话是收费的，不过对我们大学生的话可以用学生邮箱注册免费使用！安装后我们打开File-Settings-Plugins，下方找到Install Jetbrains plugins然后输入Scala就能找到插件了，我们不妨看看Scala的流行程度吧。<br><img src="http://wx4.sinaimg.cn/mw690/005PiU9ugy1fbv9yhljmjj30bf0ez0t7.jpg" alt="插件下载量排名"></p>
<p>图上可见Scala下载量是最多的，究其原因也是和最近大数据的热门有关。</p>
<h2 id="Spark环境配置"><a href="#Spark环境配置" class="headerlink" title="Spark环境配置"></a>Spark环境配置</h2><p>Spark的jar包可以去<a href="http://spark.apache.org/" target="_blank" rel="external">官网</a>下载，以1.5.0版本的Spark为例，我们需要用的是lib下的spark-assembly-1.5.0-hadoop2.4.0.jar这个包。首先在编译器内新建一个Scala项目，然后在项目页File- project structure-Libraries,点“+”，选Java，找到spark-assembly-1.5.0-hadoop2.4.0.jar导入，这样就可以编写spark的scala程序了。这里需要特别提的两点是：我们编写的Scala程序要想运行，你可以选择在本地跑，当然也可以把程序打包成jar包发布到Spark集群上跑，前者对机器配置的要求低一些，适合电脑内存低的用户使用，毕竟集群要在虚拟机上跑的。还有就是Scala和Spark的版本最好是要匹配，就我本人来说Spark用的是1.5.0版本，开始用最新的Scala版本时程序运行会报错，把Scala版本降到2.10.6后就正常了。</p>
<h3 id="Spark集群上运行Scala程序"><a href="#Spark集群上运行Scala程序" class="headerlink" title="Spark集群上运行Scala程序"></a>Spark集群上运行Scala程序</h3><p>关于Scala集群的搭建网上都有，当然Spark集群要依赖于Hadoop集群，所以你首先还要去安装Hadoop，两个集群配好后怎么生成jar包发布到集群上呢？<br>1.在IntelliJ  IDEA里点击File-Project Structure-Artifacts-“+”-Jar-From modules with dependencies…”，填写modules、MainClass以及路径等，点击OK生成jar包。<br>2.点击Build-Build artifacts，选择刚生成的jar包进行build。<br>3.将打包好的jar包上传到服务器某路径下。<br>4.执行命令spark-submit WhereIsYourJar 其他参数。</p>
<h3 id="本地运行Scala程序"><a href="#本地运行Scala程序" class="headerlink" title="本地运行Scala程序"></a>本地运行Scala程序</h3><p>这也是我本人用的方法，因为方便不用配环境，本地跑的话就要在程序中通过setMaster来设置程序要连接的Spark集群的Master的URL，改为local即可下文还会有示例。</p>
<h2 id="第一个Spark程序"><a href="#第一个Spark程序" class="headerlink" title="第一个Spark程序"></a>第一个Spark程序</h2><p>类似于我们入门很多语言时的Hello World，在Spark里什么可以作为第一个小程序呢，最经典的一个莫过于WorldCount了，词频数统计就是统计一个或者多个文件中单词出现的次数。首先看下代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">package baichuan</div><div class="line">/**</div><div class="line">  * 使用Scala开发本地测试的Spark WordCount程序</div><div class="line">  */</div><div class="line">import org.apache.spark.SparkConf</div><div class="line">import org.apache.spark.SparkContext</div><div class="line">object WordCount &#123;</div><div class="line">def main(args: Array[String]): Unit = &#123;</div><div class="line">    val conf = new SparkConf()</div><div class="line">    conf.setAppName(<span class="string">"MyFirstSparkApplication"</span>)  </div><div class="line">    conf.setMaster(<span class="string">"local"</span>)   </div><div class="line">    val sc = new SparkContext(conf)     </div><div class="line">    val lines= sc.textFile(<span class="string">"G:\\Scala\\test.txt"</span>, 1)    </div><div class="line">    val words = lines.flatMap &#123; line =&gt; line.split(<span class="string">" "</span>) &#125;  </div><div class="line">    val pairs = words.map &#123; word =&gt; (word,1) &#125;</div><div class="line">    val wordCounts = pairs.reduceByKey(_+_)       </div><div class="line">    wordCounts.foreach(wordNumberPair =&gt; println(wordNumberPair._1 + <span class="string">" : "</span> + wordNumberPair._2))</div><div class="line">    sc.stop()    </div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>从上面我们可以看出代码还是很短的，但是却能实现一个很实用的计数功能，如果你用Java或者C++写同样功能的程序时代码一定是比这个多很多的，说明Scala在大数据处理方面的确有着优势。鉴于是第一个程序，这里详细讲解一下一些重要也是基本的语法结构。首先import两个包，这是Spark程序所必需的。我们第一步是要创建Spark的配置对象SparkConf，设置Spark程序的运行时的配置信息，例如说通过setMaster来设置程序要连接的Spark集群的Master的URL，如果设置为local，则代表Spark程序在本地运行，特别适合于配置条件的较差的人。第二步:创建SparkContext对象，SparkContext是Spark程序所有功能的唯一入口，无论是采用Scala，Java，Python等都必须有一个SparkContext，它的核心作用是初始化Spark应用程序运行所需要的核心组件，是整个Spark应用程序中最为至关重要的一个对象。然后是读取本地文件。紧接着就是核心的处理方法了：<br>1.使用 flatMap 算子把一行文本 split 成多个单词<br>2.使用 map 算子把单个的单词转化成一个有计数的 Key-Value 对，即 word -&gt; (word,1)<br>3.统计相同单词的出现次数需要使用 reduceByKey 算子把相同单词的计数相加得到最终结果<br>最后一定注意要将SparkContext的对象停止，因为SparkContext运行时会创建很多的对象。然后我们就可以再txt文档里输入一些单词测试程序了，程序运行之后一定会有一个错误，因为没有hadoop环境，这个不是程序错误，也不影响任何功能。</p>
<h2 id="Spark程序处理大数据"><a href="#Spark程序处理大数据" class="headerlink" title="Spark程序处理大数据"></a>Spark程序处理大数据</h2><p>假设我们需要统计一个 1000 万人口的所有人的平均年龄，你也可以改成1个亿来测试Spark 对于大数据的处理能力，无非就是本地运行时间长短而已。假设这些年龄信息都存储在一个文件里，并且该文件的格式如下，第一列是 ID，第二列是年龄。现在我们需要用 Scala 写一个生成 1000 万人口年龄数据的文件，源程序如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">package baichuan</div><div class="line">import java.io.FileWriter</div><div class="line">import java.io.File</div><div class="line">import scala.util.Random</div><div class="line">object SampleDataFileGenerator &#123;</div><div class="line">    def main(args:Array[String]) &#123;</div><div class="line">    val writer = new FileWriter(new File(<span class="string">"G:\\Scala\\sample_age_data.txt"</span>),<span class="literal">false</span>)</div><div class="line">    val rand = new Random()</div><div class="line">    <span class="keyword">for</span> ( i &lt;- 1 to 10000000) &#123;</div><div class="line">      writer.write( i + <span class="string">" "</span> + rand.nextInt(100))</div><div class="line">      writer.write(System.getProperty(<span class="string">"line.separator"</span>))</div><div class="line">    &#125;</div><div class="line">    writer.flush()</div><div class="line">    writer.close()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>紧接着是对数据进行处理，源程序如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">package baichuan</div><div class="line">import org.apache.spark.SparkConf</div><div class="line">import org.apache.spark.SparkContext</div><div class="line"></div><div class="line">object AvgAgeCalculator &#123;</div><div class="line">    def main(args:Array[String]) &#123;</div><div class="line">    val conf = new SparkConf()</div><div class="line">    conf.setMaster(<span class="string">"local"</span>)</div><div class="line">    conf.setAppName(<span class="string">"MySparkApplication"</span>)</div><div class="line">    val sc = new SparkContext(conf)</div><div class="line">    val dataFile = sc.textFile(<span class="string">"G:\\Scala\\sample_age_data.txt"</span>, 5)</div><div class="line">    val count = dataFile.count()</div><div class="line">    val ageData = dataFile.map(line =&gt; line.split(<span class="string">" "</span>)(1))</div><div class="line">    val totalAge = ageData.map(age =&gt; Integer.parseInt(</div><div class="line">    String.valueOf(age))).collect().sum</div><div class="line">    println(<span class="string">"Total Age:"</span> + totalAge + <span class="string">";Number of People:"</span> + count )</div><div class="line">    val avgAge : Double = totalAge.toDouble / count.toDouble</div><div class="line">    println(<span class="string">"Average Age is "</span> + avgAge)</div><div class="line">    sc.stop()</div><div class="line"></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>要计算平均年龄，那么首先需要对源文件对应的 RDD (弹性分布式数据集) 进行处理，也就是将它转化成一个只包含年龄信息的 RDD，其次是计算元素个数即为总人数，然后是把所有年龄数加起来，最后平均年龄=总年龄/人数。对于第一步我们需要使用 map 算子把源文件对应的 RDD 映射成一个新的只包含年龄数据的 RDD，很显然需要对在 map 算子的传入函数中使用 split 方法，得到数组后只取第二个元素即为年龄信息；第二步计算数据元素总数需要对于第一步映射的结果 RDD 使用 count 算子；第三步则是使用 reduce 算子对只包含年龄信息的 RDD 的所有元素用加法求和；最后使用除法计算平均年龄即可。<br>这个程序我在本地跑了也就5s左右，要注意的是所有数据都放在一个文档里，因此这里并不能体现Spark独有的分布式计算优势。</p>
<h2 id="Spark-job的执行流程"><a href="#Spark-job的执行流程" class="headerlink" title="Spark job的执行流程"></a>Spark job的执行流程</h2><p>Spark 应用程序在提交执行后，控制台会打印很多日志信息，体现了一个被提交的 Spark job 在集群中是如何被调度执行的。先来搞清几个概念：<br><code>DAG</code>: 即 Directed Acyclic  Graph，有向无环图，这是一个图论中的概念。如果一个有向图无法从某个顶点出发经过若干条边回到该点，则这个图是一个有向无环图。<br><code>Job</code>：Spark 的计算操作是 lazy 执行的，只有当碰到一个动作 (Action) 算子时才会触发真正的计算。一个 Job 就是由动作算子而产生包含一个或多个 Stage 的计算作业。<br><code>Stage</code>：Job 被确定后,Spark 的调度器 (DAGScheduler) 会根据该计算作业的计算步骤把作业划分成一个或者多个 Stage。Stage 又分为 ShuffleMapStage 和 ResultStage，前者以 shuffle 为输出边界，后者会直接输出结果，其边界可以是获取外部数据，也可以是以一个 ShuffleMapStage 的输出为边界。每一个 Stage 将包含一个 TaskSet。<br><code>TaskSet</code>： 代表一组相关联的没有 shuffle 依赖关系的任务组成任务集。一组任务会被一起提交到更加底层的 TaskScheduler。<br><code>Task</code>：代表单个数据分区上的最小处理单元。分为 ShuffleMapTask 和 ResultTask。ShuffleMapTask 执行任务并把任务的输出划分到 (基于 task 的对应的数据分区) 多个 bucket(ArrayBuffer) 中,ResultTask 执行任务并把任务的输出发送给驱动程序。总之Spark 的作业任务调度是复杂的，需要结合源码来进行较为详尽的分析。大致的流程如下：<br>Spark 应用程序被提交后，当某个动作算子触发了计算操作时，SparkContext 会向 DAGScheduler 提交一个作业，接着 DAGScheduler 会根据 RDD 生成的依赖关系划分 Stage，并决定各个 Stage 之间的依赖关系，Stage 之间的依赖关系就形成了 DAG。Stage 的划分是以 ShuffleDependency 为依据的，也就是说当某个 RDD 的运算需要将数据进行 Shuffle 时，这个包含了 Shuffle 依赖关系的 RDD 将被用来作为输入信息，进而构建一个新的 Stage。我们可以看到用这样的方式划分 Stage，能够保证有依赖关系的数据可以以正确的顺序执行。根据每个 Stage 所依赖的 RDD 数据的 partition 的分布，会产生出与 partition 数量相等的 Task，这些 Task 根据 partition 的位置进行分布。其次对于 finalStage 或是 mapStage 会产生不同的 Task，最后所有的 Task 会封装到 TaskSet 内提交到 TaskScheduler 去执行。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Sublime Text 3入坑小记]]></title>
      <url>http://yoursite.com/2016/12/23/Sublime%20Text%203%E5%85%A5%E5%9D%91%E5%B0%8F%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>记录一下自己捣腾Sublime的过程和遇到的问题<a id="more"></a></excerpt></p>
<h2 id="介绍及安装"><a href="#介绍及安装" class="headerlink" title="介绍及安装"></a>介绍及安装</h2><h3 id="简要介绍"><a href="#简要介绍" class="headerlink" title="简要介绍"></a>简要介绍</h3><p>简书上一段话评论的我觉得很在理<br>Sublime Text：一款具有代码高亮、语法提示、自动完成且反应快速的编辑器软件，不仅具有华丽的界面，还支持插件扩展机制，用她来写代码，绝对是一种享受。相比于难于上手的Vim，浮肿沉重的Eclipse，VS，即便体积轻巧迅速启动的Editplus、Notepad++，在SublimeText面前大略显失色，无疑这款性感无比的编辑器是Coding和Writing最佳的选择，没有之一。</p>
<h3 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h3><p>想安装的话还是很简单的，我是在Win10环境下安装的，这是<a href="http://www.sublimetext.com/" target="_blank" rel="external">官网</a>选择自己电脑系统对应的安装包下载后一路next即可，安装完后小伙伴要是不喜欢英文的话可以戳<a href="http://pan.baidu.com/s/1qWnBNvI" target="_blank" rel="external">这里</a>下载汉化安装包然后拷到<code>InstalledPackages</code>文件夹中就会发现汉化成功啦。</p>
<h3 id="安装Package-Control"><a href="#安装Package-Control" class="headerlink" title="安装Package Control"></a>安装Package Control</h3><p>Sublime Text的强大就是拥有很高的可扩展性。小伙伴们可根据自己的需要安装不同的插件，这样会使它变得无比强大的同时又不失方便性。插件有两种安装方式，我本人是用第二种装的。</p>
<h4 id="直接安装"><a href="#直接安装" class="headerlink" title="直接安装"></a>直接安装</h4><p>直接下载安装包解压缩到<code>Packages</code>目录(菜单-&gt;preferences-&gt;packages)。</p>
<h4 id="使用Package-Control组件安装"><a href="#使用Package-Control组件安装" class="headerlink" title="使用Package Control组件安装"></a>使用Package Control组件安装</h4><p>按Ctrl+`然后在最底行输入以下代码并回车：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import urllib.request,os; pf = <span class="string">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), <span class="string">'wb'</span>).write(urllib.request.urlopen( <span class="string">'http://sublime.wbond.net/'</span> + pf.replace(<span class="string">' '</span>,<span class="string">'%20'</span>)).read())</div></pre></td></tr></table></figure></p>
<p>然后重启软件即可。接着我们就能按下<code>Ctrl+Shift+P</code>输入Install找到Install Package选项就能选择不同插件了。关于插件的详细介绍可以戳官网的<a href="https://packagecontrol.io/" target="_blank" rel="external">详细介绍</a>，很多博客大牛也有心得分享，这里小弟就不细讲了，总之插件真的是一个好东西就对了！</p>
<h2 id="配置C-C-编译环境"><a href="#配置C-C-编译环境" class="headerlink" title="配置C/C++编译环境"></a>配置C/C++编译环境</h2><p>Sublime Text 3 的构建系统（Build systems）可以运行一段外部命令，还可以捕获输出并显示。要在sublime text 3中实现c或c++代码的编译和运行，在本质上说也是调用外部的命令，windows中也可以理解为执行一段cmd命令。目前c/c++编译器最流行的就是gcc和g++，在windows下使用gcc和g++，是通过安装<code>MinGW</code>实现的。</p>
<h3 id="安装MinGW"><a href="#安装MinGW" class="headerlink" title="安装MinGW"></a>安装MinGW</h3><p>MinGW是Minimalist GNU on Windows的首字母缩写，安装后就可以使用很多的GNU工具。GNU是linux中的一个著名的项目，包含了gcc\g++\gdb等工具。也就是说，安装MinGw后，我们就可以使用gcc和g++命令了。MinGW下载可以去<a href="http://www.mingw.org/" target="_blank" rel="external">官网</a></p>
<h3 id="添加系统环境变量"><a href="#添加系统环境变量" class="headerlink" title="添加系统环境变量"></a>添加系统环境变量</h3><p>个人感觉这是一个老生常谈的话题了- -，默认条件下是 C:/MinGW/bin ，如果不是请自行修改。如果不知道如何修改系统环境变量，请参考 <a href="http://www.java.com/zh_CN/download/help/path.xml" target="_blank" rel="external">http://www.java.com/zh_CN/download/help/path.xml</a><br>运行CMD，输入<code>g++ -v</code>，用于检测安装g++有没有成功。</p>
<h3 id="建立新的编译系统"><a href="#建立新的编译系统" class="headerlink" title="建立新的编译系统"></a>建立新的编译系统</h3><p>Tools –&gt; Build System –&gt; New Build System 在打开的页面中粘贴以下代码保存文件名<code>C++.sublime-build</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&#123;  </div><div class="line">    <span class="string">"path"</span>: <span class="string">"G:/Sublime Text 3_x64(Python and CPP)/MinGW/bin"</span>,  </div><div class="line">    <span class="string">"cmd"</span>: [<span class="string">"g++.exe"</span>, <span class="string">"<span class="variable">$&#123;file&#125;</span>"</span>, <span class="string">"-o"</span>, <span class="string">"<span class="variable">$&#123;file_path&#125;</span>/<span class="variable">$&#123;file_base_name&#125;</span>"</span>],  </div><div class="line">    <span class="string">"file_regex"</span>: <span class="string">"^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$"</span>,  </div><div class="line">    <span class="string">"working_dir"</span>: <span class="string">"<span class="variable">$&#123;file_path&#125;</span>"</span>,  </div><div class="line">    <span class="string">"selector"</span>: <span class="string">"source.c, source.c++"</span>,  </div><div class="line">    <span class="string">"encoding"</span>:<span class="string">"UTF-8"</span>,   </div><div class="line">    <span class="string">"encoding"</span>: <span class="string">"cp936"</span>,  </div><div class="line">    <span class="string">"variants"</span>:  </div><div class="line">    [  </div><div class="line">        &#123;  </div><div class="line">             <span class="string">"name"</span>: <span class="string">"Run"</span>,  </div><div class="line">              </div><div class="line">            <span class="string">"cmd"</span>: [ <span class="string">"<span class="variable">$&#123;file_path&#125;</span>/<span class="variable">$&#123;file_base_name&#125;</span>.exe"</span>],  </div><div class="line">            <span class="string">"shell"</span>: <span class="literal">true</span>,  </div><div class="line">            <span class="string">"cmd"</span> : [<span class="string">"start"</span>, <span class="string">"cmd"</span>, <span class="string">"/k"</span>, <span class="string">"<span class="variable">$&#123;file_path&#125;</span>/<span class="variable">$&#123;file_base_name&#125;</span> &amp;&amp;echo. &amp; pause &amp;&amp; exit"</span>]  </div><div class="line">        &#125;  </div><div class="line">    ]  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>说明：请将path参数设置为自己安装的mingw所在文件夹的bin目录，该参数的意思就是在执行cmd编译之前将系统环境变量暂时改变为设置的值，cmd执行结束后在取消修改，因此不需要在系统中设置环境变量了。</p>
<h3 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h3><p>在Tools -&gt; Build System下可以看到刚才新建的C++了，选中后就可以使用了。</p>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="中文乱码"><a href="#中文乱码" class="headerlink" title="中文乱码"></a>中文乱码</h3><p>一种常见的乱码就是你会发现打开一些文件，里面的中文都无法正常显示，这是因为它默认不支持<code>GBK</code>的编码格式，因此打开GBK的代码文件，如果里面有中文的话，就会乱码。解决方法就是安装一个名为<code>ConvertToUTF8</code>的插件，安装方法参照上文。还有一种乱码是我自己遇到的，配置完C++环境后运行一个程序时输出的中文乱码，参照网上众多解决方法在此介绍一种适合自己的方案：因为cmd默认的编码是采用GBK，我们可以借助<code>chcp</code>命令改变默认编码，进入cmd后输入chcp 65001就是换成<code>UTF-8</code>编码，然后CMD窗口顶部右键，选择“属性”，修改里面的字体，UTF-8选<code>Lucida Console</code>即可解决问题。如果想恢复成系统默认GBK编码可以输入chcp 936。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[markdown格式测试]]></title>
      <url>http://yoursite.com/2016/12/20/markdown/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>本文仅供自己平日撰写博客查询格式所用，不做特殊说明。<a id="more"></a></excerpt></p>
<h1 id="Cmd-Markdown-简明语法手册"><a href="#Cmd-Markdown-简明语法手册" class="headerlink" title="Cmd Markdown 简明语法手册"></a>Cmd Markdown 简明语法手册</h1><h3 id="1-斜体和粗体"><a href="#1-斜体和粗体" class="headerlink" title="1. 斜体和粗体"></a>1. 斜体和粗体</h3><p>使用 <em> 和 *</em> 表示斜体和粗体。</p>
<p>示例：</p>
<p>这是 <em>斜体</em>，这是 <strong>粗体</strong>。</p>
<h3 id="2-分级标题"><a href="#2-分级标题" class="headerlink" title="2. 分级标题"></a>2. 分级标题</h3><p>使用 === 表示一级标题，使用 - - - 表示二级标题。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">这是一个一级标题</div><div class="line">============================</div><div class="line"></div><div class="line">这是一个二级标题</div><div class="line">--------------------------------------------------</div><div class="line"></div><div class="line">### 这是一个三级标题</div></pre></td></tr></table></figure>
<p>你也可以选择在行首加井号表示不同级别的标题 (H1-H6)，例如：# H1, ## H2, ### H3，#### H4。</p>
<h3 id="3-外链接"><a href="#3-外链接" class="headerlink" title="3. 外链接"></a>3. 外链接</h3><p>使用 [描述](链接地址) 为文字增加外链接。</p>
<p>示例：</p>
<p>这是去往 <a href="qiaobaichuan.com">本人博客</a> 的链接。</p>
<h3 id="4-无序列表"><a href="#4-无序列表" class="headerlink" title="4. 无序列表"></a>4. 无序列表</h3><p>使用 *，+，- 表示无序列表。</p>
<p>示例：</p>
<ul>
<li>无序列表项 一</li>
<li>无序列表项 二</li>
<li>无序列表项 三</li>
</ul>
<h3 id="5-有序列表"><a href="#5-有序列表" class="headerlink" title="5. 有序列表"></a>5. 有序列表</h3><p>使用数字和点表示有序列表。</p>
<p>示例：</p>
<ol>
<li>有序列表项 一</li>
<li>有序列表项 二</li>
<li>有序列表项 三</li>
</ol>
<h3 id="6-文字引用"><a href="#6-文字引用" class="headerlink" title="6. 文字引用"></a>6. 文字引用</h3><p>使用 &gt; 表示文字引用。</p>
<p>示例：</p>
<blockquote>
<p>野火烧不尽，春风吹又生。</p>
</blockquote>
<h3 id="7-行内代码块"><a href="#7-行内代码块" class="headerlink" title="7. 行内代码块"></a>7. 行内代码块</h3><p>使用 `代码` 表示行内代码块。</p>
<p>示例：</p>
<p>让我们聊聊 <code>html</code>。</p>
<h3 id="8-代码块"><a href="#8-代码块" class="headerlink" title="8.  代码块"></a>8.  代码块</h3><p>使用 四个缩进空格 表示代码块。</p>
<p>示例：</p>
<pre><code>这是一个代码块，此行左侧有四个不可见的空格。
</code></pre><h3 id="9-插入图像"><a href="#9-插入图像" class="headerlink" title="9.  插入图像"></a>9.  插入图像</h3><p>使用 ![描述](图片链接地址) 插入图像。</p>
<p>示例：</p>
<p><img src="http://img4.duitang.com/uploads/item/201609/24/20160924140045_Fmhkx.gif" alt="咱们裸熊"></p>
<h1 id="Cmd-Markdown-高阶语法手册"><a href="#Cmd-Markdown-高阶语法手册" class="headerlink" title="Cmd Markdown 高阶语法手册"></a>Cmd Markdown 高阶语法手册</h1><h3 id="1-内容目录"><a href="#1-内容目录" class="headerlink" title="1. 内容目录"></a>1. 内容目录</h3><p>在段落中填写 <code>[TOC]</code> 以显示全文内容的目录结构。</p>
<p>[TOC]</p>
<h3 id="2-标签分类"><a href="#2-标签分类" class="headerlink" title="2. 标签分类"></a>2. 标签分类</h3><p>在编辑区任意行的列首位置输入以下代码给文稿标签：</p>
<p>标签： 数学 英语 Markdown</p>
<p>或者</p>
<p>Tags： 数学 英语 Markdown</p>
<h3 id="3-删除线"><a href="#3-删除线" class="headerlink" title="3. 删除线"></a>3. 删除线</h3><p>使用 ~~ 表示删除线。</p>
<p><del>这是一段错误的文本。</del></p>
<h3 id="4-注脚"><a href="#4-注脚" class="headerlink" title="4. 注脚"></a>4. 注脚</h3><p>使用 [^keyword] 表示注脚。</p>
<p>这是一个注脚[^footnote]的样例。</p>
<p>这是第二个注脚[^footnote2]的样例。</p>
<h3 id="5-LaTeX-公式"><a href="#5-LaTeX-公式" class="headerlink" title="5. LaTeX 公式"></a>5. LaTeX 公式</h3><p>$ 表示行内公式： </p>
<p>质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。</p>
<p>$$ 表示整行公式：</p>
<p>$$\sum_{i=1}^n a_i=0$$</p>
<p>$$f(x_1,x_x,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2 $$</p>
<p>$$\sum^{j-1}<em>{k=0}{\widehat{\gamma}</em>{kj} z_k}$$</p>
<p>访问 <a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="external">MathJax</a> 参考更多使用方法。</p>
<h3 id="6-加强的代码块"><a href="#6-加强的代码块" class="headerlink" title="6. 加强的代码块"></a>6. 加强的代码块</h3><p>支持四十一种编程语言的语法高亮的显示，行号显示。</p>
<p>非代码示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo apt-get install vim-gnome</div></pre></td></tr></table></figure>
<p>Python 示例：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@requires_authorization</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">somefunc</span><span class="params">(param1=<span class="string">''</span>, param2=<span class="number">0</span>)</span>:</span></div><div class="line">    <span class="string">'''A docstring'''</span></div><div class="line">    <span class="keyword">if</span> param1 &gt; param2: <span class="comment"># interesting</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'Greater'</span></div><div class="line">    <span class="keyword">return</span> (param2 - param1 + <span class="number">1</span>) <span class="keyword">or</span> <span class="keyword">None</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>message = <span class="string">'''interpreter</span></div><div class="line"><span class="meta">... </span>prompt'''</div></pre></td></tr></table></figure>
<p>JavaScript 示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* nth element in the fibonacci series.</div><div class="line">* @param n &gt;= 0</div><div class="line">* @return the nth element, &gt;= 0.</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fib</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> a = <span class="number">1</span>, b = <span class="number">1</span>;</div><div class="line">  <span class="keyword">var</span> tmp;</div><div class="line">  <span class="keyword">while</span> (--n &gt;= <span class="number">0</span>) &#123;</div><div class="line">    tmp = a;</div><div class="line">    a += b;</div><div class="line">    b = tmp;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> a;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">document</span>.write(fib(<span class="number">10</span>));</div></pre></td></tr></table></figure>
<h3 id="7-流程图"><a href="#7-流程图" class="headerlink" title="7. 流程图"></a>7. 流程图</h3><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">st=&gt;start: Start:&gt;https://www.zybuluo.com</div><div class="line">io=&gt;inputoutput: verification</div><div class="line">op=&gt;operation: Your Operation</div><div class="line">cond=&gt;condition: Yes or No?</div><div class="line">sub=&gt;subroutine: Your Subroutine</div><div class="line">e=&gt;end</div><div class="line"></div><div class="line">st-&gt;io-&gt;op-&gt;cond</div><div class="line">cond(yes)-&gt;e</div><div class="line">cond(no)-&gt;sub-&gt;io</div></pre></td></tr></table></figure>
<h4 id="更多语法参考：流程图语法参考"><a href="#更多语法参考：流程图语法参考" class="headerlink" title="更多语法参考：流程图语法参考"></a>更多语法参考：<a href="http://adrai.github.io/flowchart.js/" target="_blank" rel="external">流程图语法参考</a></h4><h3 id="8-序列图"><a href="#8-序列图" class="headerlink" title="8. 序列图"></a>8. 序列图</h3><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Alice-&gt;Bob: Hello Bob, how are you?</div><div class="line">Note right of Bob: Bob thinks</div><div class="line">Bob--&gt;Alice: I am good thanks!</div></pre></td></tr></table></figure>
<h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Title: Here is a title</div><div class="line">A-&gt;B: Normal line</div><div class="line">B--&gt;C: Dashed line</div><div class="line">C-&gt;&gt;D: Open arrow</div><div class="line">D--&gt;&gt;A: Dashed open arrow</div></pre></td></tr></table></figure>
<h4 id="更多语法参考：序列图语法参考"><a href="#更多语法参考：序列图语法参考" class="headerlink" title="更多语法参考：序列图语法参考"></a>更多语法参考：<a href="http://bramp.github.io/js-sequence-diagrams/" target="_blank" rel="external">序列图语法参考</a></h4><h3 id="9-甘特图"><a href="#9-甘特图" class="headerlink" title="9. 甘特图"></a>9. 甘特图</h3><p>甘特图内在思想简单。基本是一条线条图，横轴表示时间，纵轴表示活动（项目），线条表示在整个期间上计划和实际的活动完成情况。它直观地表明任务计划在什么时候进行，及实际进展与计划要求的对比。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">title 项目开发流程</div><div class="line">section 项目确定</div><div class="line">    需求分析       :a1, 2016-06-22, 3d</div><div class="line">    可行性报告     :after a1, 5d</div><div class="line">    概念验证       : 5d</div><div class="line">section 项目实施</div><div class="line">    概要设计      :2016-07-05  , 5d</div><div class="line">    详细设计      :2016-07-08, 10d</div><div class="line">    编码          :2016-07-15, 10d</div><div class="line">    测试          :2016-07-22, 5d</div><div class="line">section 发布验收</div><div class="line">    发布: 2d</div><div class="line">    验收: 3d</div></pre></td></tr></table></figure>
<h4 id="更多语法参考：甘特图语法参考"><a href="#更多语法参考：甘特图语法参考" class="headerlink" title="更多语法参考：甘特图语法参考"></a>更多语法参考：<a href="https://knsv.github.io/mermaid/#gant-diagrams" target="_blank" rel="external">甘特图语法参考</a></h4><h3 id="10-Mermaid-流程图"><a href="#10-Mermaid-流程图" class="headerlink" title="10. Mermaid 流程图"></a>10. Mermaid 流程图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">A[Hard edge] --&gt;|Link text| B(Round edge)</div><div class="line">B --&gt; C&#123;Decision&#125;</div><div class="line">C --&gt;|One| D[Result one]</div><div class="line">C --&gt;|Two| E[Result two]</div></pre></td></tr></table></figure>
<h4 id="更多语法参考：Mermaid-流程图语法参考"><a href="#更多语法参考：Mermaid-流程图语法参考" class="headerlink" title="更多语法参考：Mermaid 流程图语法参考"></a>更多语法参考：<a href="https://knsv.github.io/mermaid/#flowcharts-basic-syntax" target="_blank" rel="external">Mermaid 流程图语法参考</a></h4><h3 id="11-Mermaid-序列图"><a href="#11-Mermaid-序列图" class="headerlink" title="11. Mermaid 序列图"></a>11. Mermaid 序列图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Alice-&gt;John: Hello John, how are you?</div><div class="line">loop every minute</div><div class="line">    John--&gt;Alice: Great!</div><div class="line">end</div></pre></td></tr></table></figure>
<h4 id="更多语法参考：Mermaid-序列图语法参考"><a href="#更多语法参考：Mermaid-序列图语法参考" class="headerlink" title="更多语法参考：Mermaid 序列图语法参考"></a>更多语法参考：<a href="https://knsv.github.io/mermaid/#sequence-diagrams" target="_blank" rel="external">Mermaid 序列图语法参考</a></h4><h3 id="12-表格支持"><a href="#12-表格支持" class="headerlink" title="12. 表格支持"></a>12. 表格支持</h3><table>
<thead>
<tr>
<th>项目</th>
<th style="text-align:right">价格</th>
<th style="text-align:center">数量</th>
</tr>
</thead>
<tbody>
<tr>
<td>计算机</td>
<td style="text-align:right">\$1600</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td>手机</td>
<td style="text-align:right">\$12</td>
<td style="text-align:center">12</td>
</tr>
<tr>
<td>管线</td>
<td style="text-align:right">\$1</td>
<td style="text-align:center">234</td>
</tr>
</tbody>
</table>
<h3 id="13-定义型列表"><a href="#13-定义型列表" class="headerlink" title="13. 定义型列表"></a>13. 定义型列表</h3><p>名词 1<br>:   定义 1（左侧有一个可见的冒号和四个不可见的空格）</p>
<p>代码块 2<br>:   这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格）</p>
<pre><code>代码块（左侧有八个不可见的空格）
</code></pre><h3 id="14-内嵌图标"><a href="#14-内嵌图标" class="headerlink" title="14. 内嵌图标"></a>14. 内嵌图标</h3><p>本站的图标系统对外开放，在文档中输入</p>
<pre><code>&lt;i class=&quot;icon-weibo&quot;&gt;&lt;/i&gt;
</code></pre><p>即显示微博的图标： <i class="icon-weibo icon-2x"></i></p>
<p>替换 上述 <code>i 标签</code> 内的 <code>icon-weibo</code> 以显示不同的图标，例如：</p>
<pre><code>&lt;i class=&quot;icon-renren&quot;&gt;&lt;/i&gt;
</code></pre><p>即显示人人的图标： <i class="icon-renren icon-2x"></i></p>
<p>更多的图标和玩法可以参看 <a href="http://fortawesome.github.io/Font-Awesome/3.2.1/icons/" target="_blank" rel="external">font-awesome</a> 官方网站。</p>
<h3 id="15-待办事宜-Todo-列表"><a href="#15-待办事宜-Todo-列表" class="headerlink" title="15. 待办事宜 Todo 列表"></a>15. 待办事宜 Todo 列表</h3><p>使用带有 [ ] 或 [x] （未完成或已完成）项的列表语法撰写一个待办事宜列表，并且支持子列表嵌套以及混用Markdown语法，例如：</p>
<pre><code>- [ ] **Cmd Markdown 开发**
    - [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率
    - [ ] 支持以 PDF 格式导出文稿
    - [x] 新增Todo列表功能 [语法参考](https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments)
    - [x] 改进 LaTex 功能
        - [x] 修复 LaTex 公式渲染问题
        - [x] 新增 LaTex 公式编号功能 [语法参考](http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers)
- [ ] **七月旅行准备**
    - [ ] 准备邮轮上需要携带的物品
    - [ ] 浏览日本免税店的物品
    - [x] 购买蓝宝石公主号七月一日的船票
</code></pre><p>对应显示如下待办事宜 Todo 列表：</p>
<ul>
<li>[ ] <strong>Cmd Markdown 开发</strong><ul>
<li>[ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li>
<li>[ ] 支持以 PDF 格式导出文稿</li>
<li>[x] 新增Todo列表功能 <a href="https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments" target="_blank" rel="external">语法参考</a></li>
<li>[x] 改进 LaTex 功能<ul>
<li>[x] 修复 LaTex 公式渲染问题</li>
<li>[x] 新增 LaTex 公式编号功能 <a href="http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers" target="_blank" rel="external">语法参考</a></li>
</ul>
</li>
</ul>
</li>
<li>[ ] <strong>七月旅行准备</strong><ul>
<li>[ ] 准备邮轮上需要携带的物品</li>
<li>[ ] 浏览日本免税店的物品</li>
<li>[x] 购买蓝宝石公主号七月一日的船票</li>
</ul>
</li>
</ul>
<p>[^footnote]: 这是一个 <em>注脚</em> 的 <strong>文本</strong>。</p>
<p>[^footnote2]: 这是另一个 <em>注脚</em> 的 <strong>文本</strong>。</p>
]]></content>
    </entry>
    
  
  
</search>
